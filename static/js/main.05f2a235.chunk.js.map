{"version":3,"sources":["app/App.module.scss","components/PaperPage/PaperPage.module.scss","components/PaperPage/PaperPageContainer.module.scss","components/PaperPage/PaperPage.tsx","components/PaperPage/PaperPageContainer.tsx","pages/cv/CvPage.tsx","pages/home/HomePage.tsx","app/Router.tsx","app/App.tsx","serviceWorker.ts","index.tsx","pages/home/HomePage.module.scss"],"names":["module","exports","PaperPage","props","children","className","styles","PaperPageContainer","pages","React","Children","map","child","Page1","Page2","CvPage","Helmet","name","content","HomePage","presentationText","href","button","Router","exact","path","to","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4EACAA,EAAOC,QAAU,CAAC,IAAM,mB,mBCAxBD,EAAOC,QAAU,CAAC,UAAY,+B,mBCA9BD,EAAOC,QAAU,CAAC,mBAAqB,iD,mMCSxBC,EANa,SAACC,GAAW,IAC9BC,EAAaD,EAAbC,SAER,OAAO,yBAAKC,UAAWC,IAAOJ,WAAYE,I,iBCQ7BG,EAVsB,SAACJ,GAAW,IACvCC,EAAaD,EAAbC,SAEFI,EAAQC,IAAMC,SAASC,IAAIP,GAAU,SAACQ,GAAD,OACzC,kBAAC,EAAD,KAAYA,MAGd,OAAO,yBAAKP,UAAWC,IAAOC,oBAAqBC,ICP/CK,EAAkB,WACtB,OAAO,sCAGHC,EAAkB,WACtB,OAAO,sCAmBMC,EAhBU,WACvB,OACE,oCACE,kBAACC,EAAA,EAAD,KACE,wDACA,0BAAMC,KAAK,cAAcC,QAAQ,gCAGnC,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,S,gBCEOC,EApBY,WACzB,OACE,oCACE,kBAACH,EAAA,EAAD,KACE,mDACA,0BAAMC,KAAK,cAAcC,QAAQ,2BAGnC,yBAAKb,UAAWC,IAAOa,UACrB,uBAAGd,UAAWC,IAAOc,kBAArB,oEAGA,uBAAGC,KAAK,oBAAoBhB,UAAWC,IAAOgB,QAA9C,+BCOOC,EAlBU,kBACvB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOA,KAAK,qBACV,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,IAAD,CAAUC,GAAG,UCLNC,EARO,WACpB,OACE,yBAAKtB,UAAWC,IAAOqB,KACrB,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a,kBE/I5B/C,EAAOC,QAAU,CAAC,SAAW,2BAA2B,iBAAmB,mCAAmC,OAAS,4B","file":"static/js/main.05f2a235.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__248Ek\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PaperPage\":\"PaperPage_PaperPage__1-m2_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PaperPageContainer\":\"PaperPageContainer_PaperPageContainer__rFJLu\"};","import React from 'react';\n\nimport styles from './PaperPage.module.scss';\n\nconst PaperPage: React.FC = (props) => {\n  const { children } = props;\n\n  return <div className={styles.PaperPage}>{children}</div>;\n};\n\nexport default PaperPage;\n","import React from 'react';\n\nimport PaperPage from './PaperPage';\nimport styles from './PaperPageContainer.module.scss';\n\nconst PaperPageContainer: React.FC = (props) => {\n  const { children } = props;\n\n  const pages = React.Children.map(children, (child) => (\n    <PaperPage>{child}</PaperPage>\n  ));\n\n  return <div className={styles.PaperPageContainer}>{pages}</div>;\n};\n\nexport default PaperPageContainer;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport PaperPageContainer from '../../components/PaperPage/PaperPageContainer';\n\nconst Page1: React.FC = () => {\n  return <p>Page 1</p>;\n};\n\nconst Page2: React.FC = () => {\n  return <p>Page 2</p>;\n};\n\nconst CvPage: React.FC = () => {\n  return (\n    <>\n      <Helmet>\n        <title>CV - Guillaume Benard</title>\n        <meta name=\"description\" content=\"Discover my online resume.\" />\n      </Helmet>\n\n      <PaperPageContainer>\n        <Page1 />\n        <Page2 />\n      </PaperPageContainer>\n    </>\n  );\n};\n\nexport default CvPage;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport styles from './HomePage.module.scss';\n\nconst HomePage: React.FC = () => {\n  return (\n    <>\n      <Helmet>\n        <title>Guillaume Benard</title>\n        <meta name=\"description\" content=\"My personal website !\" />\n      </Helmet>\n\n      <div className={styles.HomePage}>\n        <p className={styles.presentationText}>\n          This website is under construction, not much to see right now...\n        </p>\n        <a href=\"/curriculum-vitae\" className={styles.button}>\n          Have a look at my resume\n        </a>\n      </div>\n    </>\n  );\n};\n\nexport default HomePage;\n","import React from 'react';\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\n\nimport CvPage from '../pages/cv/CvPage';\nimport HomePage from '../pages/home/HomePage';\n\nconst Router: React.FC = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\">\n        <HomePage />\n      </Route>\n\n      <Route path=\"/curriculum-vitae\">\n        <CvPage />\n      </Route>\n\n      <Route path=\"*\">\n        <Redirect to=\"/\" />\n      </Route>\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","import React from 'react';\n\nimport styles from './App.module.scss';\nimport Router from './Router';\n\nconst App: React.FC = () => {\n  return (\n    <div className={styles.App}>\n      <Router />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* eslint-disable no-console */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"HomePage\":\"HomePage_HomePage__bNzg8\",\"presentationText\":\"HomePage_presentationText__21MMn\",\"button\":\"HomePage_button__2K6mK\"};"],"sourceRoot":""}